- Game Logic ------------------------------------------

 ✔ Test Testing @done (18-02-25 19:24)
 ✔ Test Json Serialization @done (18-03-03 16:02)
  ✔ Serialize Inventory @done (18-03-03 16:02)
  ✔ Deserialize Inventory @done (18-03-03 16:02)
  {
   "Item1.Id": 100,
   "Item2.Id": 10;
  }

Inventory:
 ✔ ItemDatabase @done (18-03-03 16:02)
 ✔ Item @done (18-03-03 16:02)
 ✔ On deserialize, re-use non unique items @done (18-03-03 16:02)
 ✔ Weapon @done (18-03-03 16:38)
 ✔ Armour @done (18-03-03 21:05)

Character:
 ✔ "Controller" -> The Character @done (18-03-03 21:06)
 ✔ Serialize @done (18-03-04 10:49)
 ✔ Deserialize @done (18-03-04 10:49)
  ✔ Attributes @done (18-03-03 22:38)
  ✔ Inventory @done (18-03-03 22:38)
  ✔ Skills @done (18-03-04 10:49)
   ✔ SkillDatabase @done (18-03-04 10:49)
  ✔ Equipment @done (18-03-04 10:49)
 ☐ Stats
  ✔ Skills @done (18-03-04 13:36)
  ☐ Aspects
  ☐ Stunts
 ✔ TestLevel @done (18-03-04 18:27)
 ✔ TestCharacter @done (18-03-04 22:46)
  ✔ StateMachine with Animation @done (18-03-04 22:46)
 ☐ Re-implement States
  ✔ IdleState @done (18-03-04 15:20)
  ✔ MoveState @done (18-03-04 15:20)
  ✔ ChaseState @done (18-03-04 22:46)
   ☐ unify the rotate to target in states
   ✔ Enemy @done (18-03-04 22:46)
  ☐ AttackState
   ✔ AttackShape.PointInArea @done (18-03-05 23:16)
   ☐ Implement Radius in AttackShape calculation
   ☐ Re-implement combat
    ☐ Attack
    ☐ ScheduleAttack
    ☐ Defend
    ☐ Damage
    ☐ Protection
    ☐ TakenOut
    ☐ Only Attack when the Player clicks
 ☐ GameMaster -> ScriptableObject, referenced by Character etc.
 ☐ Re-implement Rulebook.SynonymsOf(tag) as ScriptableObject tag database object
 ☐ ParseNameForTags()
 ☐ Serialize Tags and Aspects
 ☐ Consequences
 ☐ Equipment
 ☐ stunts
 ☐ GameEventsLogger
 ☐ ReceiveXP

GlobalState:
 ☐ Variables
 ☐ Support arbitrary data type

Quest System:
 ☐ Quests

Dialogs:
 ☐ Inkle integration

UIs:
 ☐ MainMenuUI
 ☐ PlayerMenuUI
 ☐ HUDMessageUI
 ☐ InventoryUI
 ☐ ExitUI
 ☐ GameOverUI

- Editor ----------------------------------------------

Data Pipeline:
 ☐ Download data from google drive (python script)
 ☐ Convert the json data into ScriptableObjects and extend the existing database
  ☐ Restrictions:
   ☐ Have an attribute, like "json driven" on the items. If true the item can't be edited, only through the json data workflow

Location:
 ☐ Build location manually
 ☐ Read from json file
 ☐ Build in Unity at runtime

 ☐ Have a level be a scene with a LevelBuilder in it, referencing a json file (or not) and executing the level building if it has a json file in it
